# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Coverage
on: 
  workflow_call:
    secrets:
      organization_key:
        required: true

jobs:
  Coverage:
    runs-on: ubuntu-20.04

    steps:
    - name: Setup action
      uses: nschloe/action-cached-lfs-checkout@v1
      with:
          exclude: "doc/*"
      
#     - name: Git checkout
#       uses: actions/checkout@v3
#       with:
#         ref: ${{ github.head_ref }}

    - name: Branch name
      run: echo running on branch ${{ github.head_ref }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11.4
        cache: 'pip' # caching pip dependencies
        
    - name: Load private keys to pipeline
      uses: webfactory/ssh-agent@v0.5.2
      with:
        ssh-private-key: |
          ${{ secrets.organization_key }}
          
    - name: Cache dependencies to speed up the workflow
      uses: actions/cache@v1
      id:   cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_tests.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --update pip=23.1.2
        pip install -v -r tests/requirements_tests.txt
        pip install coverage

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v23
      with:
        files: |
          **/*.py
        files_ignore: |
          doc/**
          badges/**
          tests/**
          integration_tests/**
          setup.py

    - name: Check which files were changed
      run: |
       if [ ${{ steps.changed-files.outputs.any_changed }} == "true" ]
          then
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
        else
          echo "No Python-related file was changed."
        fi
    
    - name: Run coverage test for all files
      run : |
        coverage run -m pytest tests
        coverage report -m
        coverage json
        echo "COVERAGE_TOTAL_VALUE=$(coverage json -o /dev/stdout | jq .totals.percent_covered | xargs printf '%.0f')" >> $GITHUB_ENV

    - name: Test coverage level of changed files 
      run : |
        if [ ${{ steps.changed-files.outputs.any_changed }} == "true" ]
          then
          echo "Note: 'No data to report' means coverage equal to 0%."
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              echo "${file} is checked..."
              coverage report --fail-under=85 --include=${file}
          done
        else
          echo "No Python-related file was changed."
        fi

    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v1
      id: badge
      with:
        label: "Coverage"
        status: "${{ env.COVERAGE_TOTAL_VALUE }}%"
        color: ${{
          env.COVERAGE_TOTAL_VALUE > 90 && 'green'              ||
          env.COVERAGE_TOTAL_VALUE > 80 && 'yellow,green'       ||
          env.COVERAGE_TOTAL_VALUE > 70 && 'yellow'             ||
          env.COVERAGE_TOTAL_VALUE > 60 && 'orange,yellow'      ||
          env.COVERAGE_TOTAL_VALUE > 50 && 'orange'             ||
          env.COVERAGE_TOTAL_VALUE > 40 && 'red,orange'         ||
          env.COVERAGE_TOTAL_VALUE > 30 && 'red,red,orange'     ||
          env.COVERAGE_TOTAL_VALUE > 20 && 'red,red,red,orange' ||
          'red' }}
        path: coverage.svg
        
    - name: Commit badge
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        mkdir -p badges
        mv "coverage.svg" "badges"
        git fetch
        git checkout "${{ github.head_ref }}"
        git add "badges/coverage.svg"   
        git commit -m "Add/Update badge" || true  
        git push
