# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Coverage
on: 
  workflow_call:
    secrets:
      organization_key:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup action
      uses: nschloe/action-cached-lfs-checkout@v1
      
    - uses: actions/checkout@v3
    - name: Set up Python 3.7.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.7.9"
    - name: Load private keys to pipeline
      uses: webfactory/ssh-agent@v0.5.2
      with:
        ssh-private-key: |
          ${{ secrets.organization_key }}
    - name: Cache dependencies to speed up the workflow
      uses: actions/cache@v1
      id:   cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_tests.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements_tests.txt
        pip install coverage
    - name: Run coverage test for all files
      run : |
        coverage run -m pytest
        coverage report -m
        coverage json
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v23

      with:
        files: |
          **/*.py
          
    - name: List all changed files
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "$file was changed"
        done
        
    - name: Check which files were changed
      run: |
       if [ ${{ steps.changed-files.outputs.any_changed }} == "true" ]
          then
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
        else
          echo "No Python-related file was changed."
        fi
    - name: Test coverage level of changed files 
      run : |
        if [ ${{ steps.changed-files.outputs.any_changed }} == "true" ]
          then
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            coverage report --fail-under=85 --include=${file}
          done
        else
          echo "No Python-related file was changed."
        fi



    # Get current banch name to use it as dest directory
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: Prepare environment
      id: coverage
      run: |
        # Generates a GitHub Workflow output named `lines` with a coverage value
        echo "##[set-output name=lines;]${COVERAGE}"
        # Output values to be used by other steps
        echo "##[set-output name=path;]${BADGE_PATH}"
        echo "##[set-output name=branch;]${BRANCH}"
      env:
        COVERAGE: 53.5%
        BADGE_PATH: ${{ steps.extract_branch.outputs.branch }}/test-badge.svg
        BRANCH: badges

    - uses: actions/checkout@v3
      with:
        ref: ${{ steps.coverage.outputs.branch }}

    # Create the directory where badges will be saved, if needed
    - name: Create destination directory
      env:
        BADGE_PATH: ${{ steps.coverage.outputs.path }}
      run: mkdir -p "${BADGE_PATH%/*}"

    # Use the output from the `coverage` step
    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v1.2.4
      id: badge
      with:
        label: 'Test coverage'
        status: ${{ steps.coverage.outputs.lines }}
        color: 'blue,555,daf'
        path: ${{ steps.coverage.outputs.path }}

    - name: Upload badge as artifact
      uses: actions/upload-artifact@v3
      with:
        name: badge
        path: ${{ steps.coverage.outputs.path }}
        if-no-files-found: error

    - name: Commit badge
      continue-on-error: true
      env:
        BADGE: ${{ steps.coverage.outputs.path }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${BADGE}"
        git commit -m "Add/Update badge"
    - name: Push badge commit
      uses: ad-m/github-push-action@master
      if: ${{ success() }}
      with:
        github_token: ${{ secrets.organization_key }}
        branch: ${{ steps.coverage.outputs.branch }}
