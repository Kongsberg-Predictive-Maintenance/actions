# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Coverage
on: 
  workflow_call:
    secrets:
      organization_key:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Setup action
      uses: nschloe/action-cached-lfs-checkout@v1
      
    - uses: actions/checkout@v3
    - name: Set up Python 3.7.9
      uses: actions/setup-python@v3
      with:
        python-version: "3.7.9"
    - name: Load private keys to pipeline
      uses: webfactory/ssh-agent@v0.5.2
      with:
        ssh-private-key: |
          ${{ secrets.organization_key }}
    - name: Cache dependencies to speed up the workflow
      uses: actions/cache@v1
      id:   cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements_tests.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r tests/requirements_tests.txt
        pip install coverage
    - name: Run coverage test for all files
      run : |
        coverage run -m pytest
        coverage report -m
        coverage json
        echo "COVERAGE_TOTAL_VALUE=$(coverage json -o /dev/stdout | jq .totals.percent_covered)" >> $GITHUB_ENV
        
#        echo "$(coverage json -o /dev/stdout | jq .totals.percent_covered)"       
#        total_score = $(jq '.totals.percent_covered_display' coverage.json)
#        total_score = $(coverage json -o /dev/stdout | jq ".totals.percent_covered_display")        
#        echo $(coverage json -o /dev/stdout | jq .totals.percent_covered_display)        
#        cov_score=$(awk '$1 == "TOTAL" {print $NF+0}' coverage.json)
#        echo "$cov_score"
  
#     - name: Generate coverage badge
#       uses: Kongsberg-Predictive-Maintenance/actions/.github/workflows/badge-configuration.yml@development
#       with:
#         badge_name: "Coverage"
#         badge_value: ${{ env.COVERAGE_TOTAL_VALUE }}
#         badge_color: "green"
#         badge_file_name: "coverage.svg"
  
    - name: Generate the badge SVG image
      uses: emibcn/badge-action@v1
      id: badge
      with:
        label: "Coverage"
        status: "${{ env.COVERAGE_TOTAL_VALUE }} %"
        color: ${{
          ${{ env.COVERAGE_TOTAL_VALUE }} > 90 && 'green'              ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 80 && 'yellow,green'       ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 70 && 'yellow'             ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 60 && 'orange,yellow'      ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 50 && 'orange'             ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 40 && 'red,orange'         ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 30 && 'red,red,orange'     ||
          ${{ env.COVERAGE_TOTAL_VALUE }} > 20 && 'red,red,red,orange' ||
          'red' }}
        path: badges/coverage.svg

    - name: Commit badge
      env:
        BRANCH: badges
        FILE: coverage.svg
      working-directory: ./badges
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${FILE}"   
        # Will give error if badge did not changed
        git commit -m "Add/Update badge" || true
    - name: Push badge commit
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}
  
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v23

      with:
        files: |
          **/*.py
          
    - name: List all changed files
      run: |
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          echo "$file was changed"
        done
        
    - name: Check which files were changed
      run: |
       if [ ${{ steps.changed-files.outputs.any_changed }} == "true" ]
          then
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
        else
          echo "No Python-related file was changed."
        fi
    - name: Test coverage level of changed files 
      run : |
        if [ ${{ steps.changed-files.outputs.any_changed }} == "true" ]
          then
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            coverage report --fail-under=85 --include=${file}
          done
        else
          echo "No Python-related file was changed."
        fi
